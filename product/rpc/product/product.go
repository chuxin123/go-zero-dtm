// Code generated by goctl. DO NOT EDIT!
// Source: product.proto

package product

import (
	"context"

	"go-zero-dtm/product/rpc/types/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckStockReq  = pb.CheckStockReq
	CheckStockResp = pb.CheckStockResp

	Product interface {
		DeductStock(ctx context.Context, in *CheckStockReq, opts ...grpc.CallOption) (*CheckStockResp, error)
		DeductStockRollback(ctx context.Context, in *CheckStockReq, opts ...grpc.CallOption) (*CheckStockResp, error)
		CheckStock(ctx context.Context, in *CheckStockReq, opts ...grpc.CallOption) (*CheckStockResp, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

func (m *defaultProduct) DeductStock(ctx context.Context, in *CheckStockReq, opts ...grpc.CallOption) (*CheckStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.DeductStock(ctx, in, opts...)
}

func (m *defaultProduct) DeductStockRollback(ctx context.Context, in *CheckStockReq, opts ...grpc.CallOption) (*CheckStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.DeductStockRollback(ctx, in, opts...)
}

func (m *defaultProduct) CheckStock(ctx context.Context, in *CheckStockReq, opts ...grpc.CallOption) (*CheckStockResp, error) {
	client := pb.NewProductClient(m.cli.Conn())
	return client.CheckStock(ctx, in, opts...)
}
